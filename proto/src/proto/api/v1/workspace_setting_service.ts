// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: api/v1/workspace_setting_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "memos.api.v1";

export interface WorkspaceSetting {
  /**
   * name is the name of the setting.
   * Format: settings/{setting}
   */
  name: string;
  value?:
    | //
    { $case: "generalSetting"; generalSetting: WorkspaceGeneralSetting }
    | //
    { $case: "storageSetting"; storageSetting: WorkspaceStorageSetting }
    | //
    { $case: "memoRelatedSetting"; memoRelatedSetting: WorkspaceMemoRelatedSetting }
    | undefined;
}

export interface WorkspaceGeneralSetting {
  /** disallow_user_registration disallows user registration. */
  disallowUserRegistration: boolean;
  /** disallow_password_auth disallows password authentication. */
  disallowPasswordAuth: boolean;
  /** additional_script is the additional script. */
  additionalScript: string;
  /** additional_style is the additional style. */
  additionalStyle: string;
  /** custom_profile is the custom profile. */
  customProfile?:
    | WorkspaceCustomProfile
    | undefined;
  /**
   * week_start_day_offset is the week start day offset from Sunday.
   * 0: Sunday, 1: Monday, 2: Tuesday, 3: Wednesday, 4: Thursday, 5: Friday, 6: Saturday
   * Default is Sunday.
   */
  weekStartDayOffset: number;
  /** disallow_change_username disallows changing username. */
  disallowChangeUsername: boolean;
  /** disallow_change_nickname disallows changing nickname. */
  disallowChangeNickname: boolean;
}

export interface WorkspaceCustomProfile {
  title: string;
  description: string;
  logoUrl: string;
  locale: string;
  appearance: string;
}

export interface WorkspaceStorageSetting {
  /** storage_type is the storage type. */
  storageType: WorkspaceStorageSetting_StorageType;
  /**
   * The template of file path.
   * e.g. assets/{timestamp}_{filename}
   */
  filepathTemplate: string;
  /** The max upload size in megabytes. */
  uploadSizeLimitMb: number;
  /** The S3 config. */
  s3Config?: WorkspaceStorageSetting_S3Config | undefined;
}

export enum WorkspaceStorageSetting_StorageType {
  STORAGE_TYPE_UNSPECIFIED = "STORAGE_TYPE_UNSPECIFIED",
  /** DATABASE - DATABASE is the database storage type. */
  DATABASE = "DATABASE",
  /** LOCAL - LOCAL is the local storage type. */
  LOCAL = "LOCAL",
  /** S3 - S3 is the S3 storage type. */
  S3 = "S3",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function workspaceStorageSetting_StorageTypeFromJSON(object: any): WorkspaceStorageSetting_StorageType {
  switch (object) {
    case 0:
    case "STORAGE_TYPE_UNSPECIFIED":
      return WorkspaceStorageSetting_StorageType.STORAGE_TYPE_UNSPECIFIED;
    case 1:
    case "DATABASE":
      return WorkspaceStorageSetting_StorageType.DATABASE;
    case 2:
    case "LOCAL":
      return WorkspaceStorageSetting_StorageType.LOCAL;
    case 3:
    case "S3":
      return WorkspaceStorageSetting_StorageType.S3;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkspaceStorageSetting_StorageType.UNRECOGNIZED;
  }
}

export function workspaceStorageSetting_StorageTypeToJSON(object: WorkspaceStorageSetting_StorageType): string {
  switch (object) {
    case WorkspaceStorageSetting_StorageType.STORAGE_TYPE_UNSPECIFIED:
      return "STORAGE_TYPE_UNSPECIFIED";
    case WorkspaceStorageSetting_StorageType.DATABASE:
      return "DATABASE";
    case WorkspaceStorageSetting_StorageType.LOCAL:
      return "LOCAL";
    case WorkspaceStorageSetting_StorageType.S3:
      return "S3";
    case WorkspaceStorageSetting_StorageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function workspaceStorageSetting_StorageTypeToNumber(object: WorkspaceStorageSetting_StorageType): number {
  switch (object) {
    case WorkspaceStorageSetting_StorageType.STORAGE_TYPE_UNSPECIFIED:
      return 0;
    case WorkspaceStorageSetting_StorageType.DATABASE:
      return 1;
    case WorkspaceStorageSetting_StorageType.LOCAL:
      return 2;
    case WorkspaceStorageSetting_StorageType.S3:
      return 3;
    case WorkspaceStorageSetting_StorageType.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** Reference: https://developers.cloudflare.com/r2/examples/aws/aws-sdk-go/ */
export interface WorkspaceStorageSetting_S3Config {
  accessKeyId: string;
  accessKeySecret: string;
  endpoint: string;
  region: string;
  bucket: string;
}

export interface WorkspaceMemoRelatedSetting {
  /** disallow_public_visibility disallows set memo as public visibility. */
  disallowPublicVisibility: boolean;
  /** display_with_update_time orders and displays memo with update time. */
  displayWithUpdateTime: boolean;
  /** content_length_limit is the limit of content length. Unit is byte. */
  contentLengthLimit: number;
  /** enable_auto_compact enables auto compact for large content. */
  enableAutoCompact: boolean;
  /** enable_double_click_edit enables editing on double click. */
  enableDoubleClickEdit: boolean;
  /** enable_link_preview enables links preview. */
  enableLinkPreview: boolean;
  /** enable_comment enables comment. */
  enableComment: boolean;
  /** enable_location enables setting location for memo. */
  enableLocation: boolean;
  /** default_visibility set the global memos default visibility. */
  defaultVisibility: string;
  /** reactions is the list of reactions. */
  reactions: string[];
  /** disable_markdown_shortcuts disallow the registration of markdown shortcuts. */
  disableMarkdownShortcuts: boolean;
}

export interface GetWorkspaceSettingRequest {
  /**
   * The resource name of the workspace setting.
   * Format: settings/{setting}
   */
  name: string;
}

export interface SetWorkspaceSettingRequest {
  /** setting is the setting to update. */
  setting?: WorkspaceSetting | undefined;
}

function createBaseWorkspaceSetting(): WorkspaceSetting {
  return { name: "", value: undefined };
}

export const WorkspaceSetting: MessageFns<WorkspaceSetting> = {
  encode(message: WorkspaceSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    switch (message.value?.$case) {
      case "generalSetting":
        WorkspaceGeneralSetting.encode(message.value.generalSetting, writer.uint32(18).fork()).join();
        break;
      case "storageSetting":
        WorkspaceStorageSetting.encode(message.value.storageSetting, writer.uint32(26).fork()).join();
        break;
      case "memoRelatedSetting":
        WorkspaceMemoRelatedSetting.encode(message.value.memoRelatedSetting, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = {
            $case: "generalSetting",
            generalSetting: WorkspaceGeneralSetting.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = {
            $case: "storageSetting",
            storageSetting: WorkspaceStorageSetting.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = {
            $case: "memoRelatedSetting",
            memoRelatedSetting: WorkspaceMemoRelatedSetting.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceSetting {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.generalSetting)
        ? { $case: "generalSetting", generalSetting: WorkspaceGeneralSetting.fromJSON(object.generalSetting) }
        : isSet(object.storageSetting)
        ? { $case: "storageSetting", storageSetting: WorkspaceStorageSetting.fromJSON(object.storageSetting) }
        : isSet(object.memoRelatedSetting)
        ? {
          $case: "memoRelatedSetting",
          memoRelatedSetting: WorkspaceMemoRelatedSetting.fromJSON(object.memoRelatedSetting),
        }
        : undefined,
    };
  },

  toJSON(message: WorkspaceSetting): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value?.$case === "generalSetting") {
      obj.generalSetting = WorkspaceGeneralSetting.toJSON(message.value.generalSetting);
    }
    if (message.value?.$case === "storageSetting") {
      obj.storageSetting = WorkspaceStorageSetting.toJSON(message.value.storageSetting);
    }
    if (message.value?.$case === "memoRelatedSetting") {
      obj.memoRelatedSetting = WorkspaceMemoRelatedSetting.toJSON(message.value.memoRelatedSetting);
    }
    return obj;
  },

  create(base?: DeepPartial<WorkspaceSetting>): WorkspaceSetting {
    return WorkspaceSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceSetting>): WorkspaceSetting {
    const message = createBaseWorkspaceSetting();
    message.name = object.name ?? "";
    if (
      object.value?.$case === "generalSetting" &&
      object.value?.generalSetting !== undefined &&
      object.value?.generalSetting !== null
    ) {
      message.value = {
        $case: "generalSetting",
        generalSetting: WorkspaceGeneralSetting.fromPartial(object.value.generalSetting),
      };
    }
    if (
      object.value?.$case === "storageSetting" &&
      object.value?.storageSetting !== undefined &&
      object.value?.storageSetting !== null
    ) {
      message.value = {
        $case: "storageSetting",
        storageSetting: WorkspaceStorageSetting.fromPartial(object.value.storageSetting),
      };
    }
    if (
      object.value?.$case === "memoRelatedSetting" &&
      object.value?.memoRelatedSetting !== undefined &&
      object.value?.memoRelatedSetting !== null
    ) {
      message.value = {
        $case: "memoRelatedSetting",
        memoRelatedSetting: WorkspaceMemoRelatedSetting.fromPartial(object.value.memoRelatedSetting),
      };
    }
    return message;
  },
};

function createBaseWorkspaceGeneralSetting(): WorkspaceGeneralSetting {
  return {
    disallowUserRegistration: false,
    disallowPasswordAuth: false,
    additionalScript: "",
    additionalStyle: "",
    customProfile: undefined,
    weekStartDayOffset: 0,
    disallowChangeUsername: false,
    disallowChangeNickname: false,
  };
}

export const WorkspaceGeneralSetting: MessageFns<WorkspaceGeneralSetting> = {
  encode(message: WorkspaceGeneralSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disallowUserRegistration !== false) {
      writer.uint32(8).bool(message.disallowUserRegistration);
    }
    if (message.disallowPasswordAuth !== false) {
      writer.uint32(16).bool(message.disallowPasswordAuth);
    }
    if (message.additionalScript !== "") {
      writer.uint32(26).string(message.additionalScript);
    }
    if (message.additionalStyle !== "") {
      writer.uint32(34).string(message.additionalStyle);
    }
    if (message.customProfile !== undefined) {
      WorkspaceCustomProfile.encode(message.customProfile, writer.uint32(42).fork()).join();
    }
    if (message.weekStartDayOffset !== 0) {
      writer.uint32(48).int32(message.weekStartDayOffset);
    }
    if (message.disallowChangeUsername !== false) {
      writer.uint32(56).bool(message.disallowChangeUsername);
    }
    if (message.disallowChangeNickname !== false) {
      writer.uint32(64).bool(message.disallowChangeNickname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceGeneralSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceGeneralSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.disallowUserRegistration = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.disallowPasswordAuth = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.additionalScript = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.additionalStyle = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.customProfile = WorkspaceCustomProfile.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.weekStartDayOffset = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.disallowChangeUsername = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.disallowChangeNickname = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceGeneralSetting {
    return {
      disallowUserRegistration: isSet(object.disallowUserRegistration)
        ? globalThis.Boolean(object.disallowUserRegistration)
        : false,
      disallowPasswordAuth: isSet(object.disallowPasswordAuth)
        ? globalThis.Boolean(object.disallowPasswordAuth)
        : false,
      additionalScript: isSet(object.additionalScript) ? globalThis.String(object.additionalScript) : "",
      additionalStyle: isSet(object.additionalStyle) ? globalThis.String(object.additionalStyle) : "",
      customProfile: isSet(object.customProfile) ? WorkspaceCustomProfile.fromJSON(object.customProfile) : undefined,
      weekStartDayOffset: isSet(object.weekStartDayOffset) ? globalThis.Number(object.weekStartDayOffset) : 0,
      disallowChangeUsername: isSet(object.disallowChangeUsername)
        ? globalThis.Boolean(object.disallowChangeUsername)
        : false,
      disallowChangeNickname: isSet(object.disallowChangeNickname)
        ? globalThis.Boolean(object.disallowChangeNickname)
        : false,
    };
  },

  toJSON(message: WorkspaceGeneralSetting): unknown {
    const obj: any = {};
    if (message.disallowUserRegistration !== false) {
      obj.disallowUserRegistration = message.disallowUserRegistration;
    }
    if (message.disallowPasswordAuth !== false) {
      obj.disallowPasswordAuth = message.disallowPasswordAuth;
    }
    if (message.additionalScript !== "") {
      obj.additionalScript = message.additionalScript;
    }
    if (message.additionalStyle !== "") {
      obj.additionalStyle = message.additionalStyle;
    }
    if (message.customProfile !== undefined) {
      obj.customProfile = WorkspaceCustomProfile.toJSON(message.customProfile);
    }
    if (message.weekStartDayOffset !== 0) {
      obj.weekStartDayOffset = Math.round(message.weekStartDayOffset);
    }
    if (message.disallowChangeUsername !== false) {
      obj.disallowChangeUsername = message.disallowChangeUsername;
    }
    if (message.disallowChangeNickname !== false) {
      obj.disallowChangeNickname = message.disallowChangeNickname;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkspaceGeneralSetting>): WorkspaceGeneralSetting {
    return WorkspaceGeneralSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceGeneralSetting>): WorkspaceGeneralSetting {
    const message = createBaseWorkspaceGeneralSetting();
    message.disallowUserRegistration = object.disallowUserRegistration ?? false;
    message.disallowPasswordAuth = object.disallowPasswordAuth ?? false;
    message.additionalScript = object.additionalScript ?? "";
    message.additionalStyle = object.additionalStyle ?? "";
    message.customProfile = (object.customProfile !== undefined && object.customProfile !== null)
      ? WorkspaceCustomProfile.fromPartial(object.customProfile)
      : undefined;
    message.weekStartDayOffset = object.weekStartDayOffset ?? 0;
    message.disallowChangeUsername = object.disallowChangeUsername ?? false;
    message.disallowChangeNickname = object.disallowChangeNickname ?? false;
    return message;
  },
};

function createBaseWorkspaceCustomProfile(): WorkspaceCustomProfile {
  return { title: "", description: "", logoUrl: "", locale: "", appearance: "" };
}

export const WorkspaceCustomProfile: MessageFns<WorkspaceCustomProfile> = {
  encode(message: WorkspaceCustomProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.logoUrl !== "") {
      writer.uint32(26).string(message.logoUrl);
    }
    if (message.locale !== "") {
      writer.uint32(34).string(message.locale);
    }
    if (message.appearance !== "") {
      writer.uint32(42).string(message.appearance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceCustomProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceCustomProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.appearance = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceCustomProfile {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : "",
      locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
      appearance: isSet(object.appearance) ? globalThis.String(object.appearance) : "",
    };
  },

  toJSON(message: WorkspaceCustomProfile): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.logoUrl !== "") {
      obj.logoUrl = message.logoUrl;
    }
    if (message.locale !== "") {
      obj.locale = message.locale;
    }
    if (message.appearance !== "") {
      obj.appearance = message.appearance;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkspaceCustomProfile>): WorkspaceCustomProfile {
    return WorkspaceCustomProfile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceCustomProfile>): WorkspaceCustomProfile {
    const message = createBaseWorkspaceCustomProfile();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.logoUrl = object.logoUrl ?? "";
    message.locale = object.locale ?? "";
    message.appearance = object.appearance ?? "";
    return message;
  },
};

function createBaseWorkspaceStorageSetting(): WorkspaceStorageSetting {
  return {
    storageType: WorkspaceStorageSetting_StorageType.STORAGE_TYPE_UNSPECIFIED,
    filepathTemplate: "",
    uploadSizeLimitMb: 0,
    s3Config: undefined,
  };
}

export const WorkspaceStorageSetting: MessageFns<WorkspaceStorageSetting> = {
  encode(message: WorkspaceStorageSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storageType !== WorkspaceStorageSetting_StorageType.STORAGE_TYPE_UNSPECIFIED) {
      writer.uint32(8).int32(workspaceStorageSetting_StorageTypeToNumber(message.storageType));
    }
    if (message.filepathTemplate !== "") {
      writer.uint32(18).string(message.filepathTemplate);
    }
    if (message.uploadSizeLimitMb !== 0) {
      writer.uint32(24).int64(message.uploadSizeLimitMb);
    }
    if (message.s3Config !== undefined) {
      WorkspaceStorageSetting_S3Config.encode(message.s3Config, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceStorageSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceStorageSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.storageType = workspaceStorageSetting_StorageTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filepathTemplate = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uploadSizeLimitMb = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.s3Config = WorkspaceStorageSetting_S3Config.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceStorageSetting {
    return {
      storageType: isSet(object.storageType)
        ? workspaceStorageSetting_StorageTypeFromJSON(object.storageType)
        : WorkspaceStorageSetting_StorageType.STORAGE_TYPE_UNSPECIFIED,
      filepathTemplate: isSet(object.filepathTemplate) ? globalThis.String(object.filepathTemplate) : "",
      uploadSizeLimitMb: isSet(object.uploadSizeLimitMb) ? globalThis.Number(object.uploadSizeLimitMb) : 0,
      s3Config: isSet(object.s3Config) ? WorkspaceStorageSetting_S3Config.fromJSON(object.s3Config) : undefined,
    };
  },

  toJSON(message: WorkspaceStorageSetting): unknown {
    const obj: any = {};
    if (message.storageType !== WorkspaceStorageSetting_StorageType.STORAGE_TYPE_UNSPECIFIED) {
      obj.storageType = workspaceStorageSetting_StorageTypeToJSON(message.storageType);
    }
    if (message.filepathTemplate !== "") {
      obj.filepathTemplate = message.filepathTemplate;
    }
    if (message.uploadSizeLimitMb !== 0) {
      obj.uploadSizeLimitMb = Math.round(message.uploadSizeLimitMb);
    }
    if (message.s3Config !== undefined) {
      obj.s3Config = WorkspaceStorageSetting_S3Config.toJSON(message.s3Config);
    }
    return obj;
  },

  create(base?: DeepPartial<WorkspaceStorageSetting>): WorkspaceStorageSetting {
    return WorkspaceStorageSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceStorageSetting>): WorkspaceStorageSetting {
    const message = createBaseWorkspaceStorageSetting();
    message.storageType = object.storageType ?? WorkspaceStorageSetting_StorageType.STORAGE_TYPE_UNSPECIFIED;
    message.filepathTemplate = object.filepathTemplate ?? "";
    message.uploadSizeLimitMb = object.uploadSizeLimitMb ?? 0;
    message.s3Config = (object.s3Config !== undefined && object.s3Config !== null)
      ? WorkspaceStorageSetting_S3Config.fromPartial(object.s3Config)
      : undefined;
    return message;
  },
};

function createBaseWorkspaceStorageSetting_S3Config(): WorkspaceStorageSetting_S3Config {
  return { accessKeyId: "", accessKeySecret: "", endpoint: "", region: "", bucket: "" };
}

export const WorkspaceStorageSetting_S3Config: MessageFns<WorkspaceStorageSetting_S3Config> = {
  encode(message: WorkspaceStorageSetting_S3Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessKeyId !== "") {
      writer.uint32(10).string(message.accessKeyId);
    }
    if (message.accessKeySecret !== "") {
      writer.uint32(18).string(message.accessKeySecret);
    }
    if (message.endpoint !== "") {
      writer.uint32(26).string(message.endpoint);
    }
    if (message.region !== "") {
      writer.uint32(34).string(message.region);
    }
    if (message.bucket !== "") {
      writer.uint32(42).string(message.bucket);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceStorageSetting_S3Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceStorageSetting_S3Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessKeyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accessKeySecret = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bucket = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceStorageSetting_S3Config {
    return {
      accessKeyId: isSet(object.accessKeyId) ? globalThis.String(object.accessKeyId) : "",
      accessKeySecret: isSet(object.accessKeySecret) ? globalThis.String(object.accessKeySecret) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
    };
  },

  toJSON(message: WorkspaceStorageSetting_S3Config): unknown {
    const obj: any = {};
    if (message.accessKeyId !== "") {
      obj.accessKeyId = message.accessKeyId;
    }
    if (message.accessKeySecret !== "") {
      obj.accessKeySecret = message.accessKeySecret;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkspaceStorageSetting_S3Config>): WorkspaceStorageSetting_S3Config {
    return WorkspaceStorageSetting_S3Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceStorageSetting_S3Config>): WorkspaceStorageSetting_S3Config {
    const message = createBaseWorkspaceStorageSetting_S3Config();
    message.accessKeyId = object.accessKeyId ?? "";
    message.accessKeySecret = object.accessKeySecret ?? "";
    message.endpoint = object.endpoint ?? "";
    message.region = object.region ?? "";
    message.bucket = object.bucket ?? "";
    return message;
  },
};

function createBaseWorkspaceMemoRelatedSetting(): WorkspaceMemoRelatedSetting {
  return {
    disallowPublicVisibility: false,
    displayWithUpdateTime: false,
    contentLengthLimit: 0,
    enableAutoCompact: false,
    enableDoubleClickEdit: false,
    enableLinkPreview: false,
    enableComment: false,
    enableLocation: false,
    defaultVisibility: "",
    reactions: [],
    disableMarkdownShortcuts: false,
  };
}

export const WorkspaceMemoRelatedSetting: MessageFns<WorkspaceMemoRelatedSetting> = {
  encode(message: WorkspaceMemoRelatedSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disallowPublicVisibility !== false) {
      writer.uint32(8).bool(message.disallowPublicVisibility);
    }
    if (message.displayWithUpdateTime !== false) {
      writer.uint32(16).bool(message.displayWithUpdateTime);
    }
    if (message.contentLengthLimit !== 0) {
      writer.uint32(24).int32(message.contentLengthLimit);
    }
    if (message.enableAutoCompact !== false) {
      writer.uint32(32).bool(message.enableAutoCompact);
    }
    if (message.enableDoubleClickEdit !== false) {
      writer.uint32(40).bool(message.enableDoubleClickEdit);
    }
    if (message.enableLinkPreview !== false) {
      writer.uint32(48).bool(message.enableLinkPreview);
    }
    if (message.enableComment !== false) {
      writer.uint32(56).bool(message.enableComment);
    }
    if (message.enableLocation !== false) {
      writer.uint32(64).bool(message.enableLocation);
    }
    if (message.defaultVisibility !== "") {
      writer.uint32(74).string(message.defaultVisibility);
    }
    for (const v of message.reactions) {
      writer.uint32(82).string(v!);
    }
    if (message.disableMarkdownShortcuts !== false) {
      writer.uint32(88).bool(message.disableMarkdownShortcuts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceMemoRelatedSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceMemoRelatedSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.disallowPublicVisibility = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.displayWithUpdateTime = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.contentLengthLimit = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enableAutoCompact = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableDoubleClickEdit = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enableLinkPreview = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.enableComment = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.enableLocation = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.defaultVisibility = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.reactions.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.disableMarkdownShortcuts = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceMemoRelatedSetting {
    return {
      disallowPublicVisibility: isSet(object.disallowPublicVisibility)
        ? globalThis.Boolean(object.disallowPublicVisibility)
        : false,
      displayWithUpdateTime: isSet(object.displayWithUpdateTime)
        ? globalThis.Boolean(object.displayWithUpdateTime)
        : false,
      contentLengthLimit: isSet(object.contentLengthLimit) ? globalThis.Number(object.contentLengthLimit) : 0,
      enableAutoCompact: isSet(object.enableAutoCompact) ? globalThis.Boolean(object.enableAutoCompact) : false,
      enableDoubleClickEdit: isSet(object.enableDoubleClickEdit)
        ? globalThis.Boolean(object.enableDoubleClickEdit)
        : false,
      enableLinkPreview: isSet(object.enableLinkPreview) ? globalThis.Boolean(object.enableLinkPreview) : false,
      enableComment: isSet(object.enableComment) ? globalThis.Boolean(object.enableComment) : false,
      enableLocation: isSet(object.enableLocation) ? globalThis.Boolean(object.enableLocation) : false,
      defaultVisibility: isSet(object.defaultVisibility) ? globalThis.String(object.defaultVisibility) : "",
      reactions: globalThis.Array.isArray(object?.reactions)
        ? object.reactions.map((e: any) => globalThis.String(e))
        : [],
      disableMarkdownShortcuts: isSet(object.disableMarkdownShortcuts)
        ? globalThis.Boolean(object.disableMarkdownShortcuts)
        : false,
    };
  },

  toJSON(message: WorkspaceMemoRelatedSetting): unknown {
    const obj: any = {};
    if (message.disallowPublicVisibility !== false) {
      obj.disallowPublicVisibility = message.disallowPublicVisibility;
    }
    if (message.displayWithUpdateTime !== false) {
      obj.displayWithUpdateTime = message.displayWithUpdateTime;
    }
    if (message.contentLengthLimit !== 0) {
      obj.contentLengthLimit = Math.round(message.contentLengthLimit);
    }
    if (message.enableAutoCompact !== false) {
      obj.enableAutoCompact = message.enableAutoCompact;
    }
    if (message.enableDoubleClickEdit !== false) {
      obj.enableDoubleClickEdit = message.enableDoubleClickEdit;
    }
    if (message.enableLinkPreview !== false) {
      obj.enableLinkPreview = message.enableLinkPreview;
    }
    if (message.enableComment !== false) {
      obj.enableComment = message.enableComment;
    }
    if (message.enableLocation !== false) {
      obj.enableLocation = message.enableLocation;
    }
    if (message.defaultVisibility !== "") {
      obj.defaultVisibility = message.defaultVisibility;
    }
    if (message.reactions?.length) {
      obj.reactions = message.reactions;
    }
    if (message.disableMarkdownShortcuts !== false) {
      obj.disableMarkdownShortcuts = message.disableMarkdownShortcuts;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkspaceMemoRelatedSetting>): WorkspaceMemoRelatedSetting {
    return WorkspaceMemoRelatedSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceMemoRelatedSetting>): WorkspaceMemoRelatedSetting {
    const message = createBaseWorkspaceMemoRelatedSetting();
    message.disallowPublicVisibility = object.disallowPublicVisibility ?? false;
    message.displayWithUpdateTime = object.displayWithUpdateTime ?? false;
    message.contentLengthLimit = object.contentLengthLimit ?? 0;
    message.enableAutoCompact = object.enableAutoCompact ?? false;
    message.enableDoubleClickEdit = object.enableDoubleClickEdit ?? false;
    message.enableLinkPreview = object.enableLinkPreview ?? false;
    message.enableComment = object.enableComment ?? false;
    message.enableLocation = object.enableLocation ?? false;
    message.defaultVisibility = object.defaultVisibility ?? "";
    message.reactions = object.reactions?.map((e) => e) || [];
    message.disableMarkdownShortcuts = object.disableMarkdownShortcuts ?? false;
    return message;
  },
};

function createBaseGetWorkspaceSettingRequest(): GetWorkspaceSettingRequest {
  return { name: "" };
}

export const GetWorkspaceSettingRequest: MessageFns<GetWorkspaceSettingRequest> = {
  encode(message: GetWorkspaceSettingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkspaceSettingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkspaceSettingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkspaceSettingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetWorkspaceSettingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkspaceSettingRequest>): GetWorkspaceSettingRequest {
    return GetWorkspaceSettingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkspaceSettingRequest>): GetWorkspaceSettingRequest {
    const message = createBaseGetWorkspaceSettingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSetWorkspaceSettingRequest(): SetWorkspaceSettingRequest {
  return { setting: undefined };
}

export const SetWorkspaceSettingRequest: MessageFns<SetWorkspaceSettingRequest> = {
  encode(message: SetWorkspaceSettingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.setting !== undefined) {
      WorkspaceSetting.encode(message.setting, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetWorkspaceSettingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetWorkspaceSettingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.setting = WorkspaceSetting.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetWorkspaceSettingRequest {
    return { setting: isSet(object.setting) ? WorkspaceSetting.fromJSON(object.setting) : undefined };
  },

  toJSON(message: SetWorkspaceSettingRequest): unknown {
    const obj: any = {};
    if (message.setting !== undefined) {
      obj.setting = WorkspaceSetting.toJSON(message.setting);
    }
    return obj;
  },

  create(base?: DeepPartial<SetWorkspaceSettingRequest>): SetWorkspaceSettingRequest {
    return SetWorkspaceSettingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetWorkspaceSettingRequest>): SetWorkspaceSettingRequest {
    const message = createBaseSetWorkspaceSettingRequest();
    message.setting = (object.setting !== undefined && object.setting !== null)
      ? WorkspaceSetting.fromPartial(object.setting)
      : undefined;
    return message;
  },
};

export type WorkspaceSettingServiceDefinition = typeof WorkspaceSettingServiceDefinition;
export const WorkspaceSettingServiceDefinition = {
  name: "WorkspaceSettingService",
  fullName: "memos.api.v1.WorkspaceSettingService",
  methods: {
    /** GetWorkspaceSetting returns the setting by name. */
    getWorkspaceSetting: {
      name: "GetWorkspaceSetting",
      requestType: GetWorkspaceSettingRequest,
      requestStream: false,
      responseType: WorkspaceSetting,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          578365826: [
            new Uint8Array([
              37,
              18,
              35,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** SetWorkspaceSetting updates the setting. */
    setWorkspaceSetting: {
      name: "SetWorkspaceSetting",
      requestType: SetWorkspaceSettingRequest,
      requestStream: false,
      responseType: WorkspaceSetting,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([7, 115, 101, 116, 116, 105, 110, 103])],
          578365826: [
            new Uint8Array([
              54,
              58,
              7,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              50,
              43,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
